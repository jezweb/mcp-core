{
  "$schema": "../../schemas/resource-schema.json",
  "uri": "docs://guides/getting-started",
  "name": "Getting Started Guide",
  "description": "Comprehensive step-by-step guide for new users to get started with the AI Provider Assistants API through this MCP server. Covers setup, basic usage, common patterns, and practical examples.",
  "mimeType": "text/markdown",
  "category": "documentation",
  "tags": ["guide", "tutorial", "getting-started", "beginner", "setup"],
  "contentType": "markdown",
  "annotations": {
    "audience": "beginner",
    "priority": "critical",
    "lastModified": "2025-01-31T12:35:00.000Z",
    "tags": ["getting-started", "tutorial", "beginner", "setup", "quickstart"],
    "category": "guides",
    "version": "1.0.0",
    "author": "Jezweb MCP Core Team",
    "usageContext": "Essential resource for new users starting with the AI Provider Assistants API. Use as the first reference point for onboarding and initial setup.",
    "prerequisites": ["AI Provider API key", "Basic understanding of APIs"],
    "relatedResources": ["docs://openai-assistants-api", "docs://best-practices", "examples://workflows/create-and-run"]
  },
  "content": "# 🚀 Getting Started with AI Provider Assistants MCP Server\n\nWelcome to the AI Provider Assistants MCP Server! This comprehensive guide will help you get up and running quickly with the AI Provider Assistants API through our Model Context Protocol (MCP) server.\n\n## 📋 Prerequisites\n\nBefore you begin, ensure you have:\n\n- **AI Provider API Key**: Get one from [AI Provider Platform](https://platform.openai.com/api-keys)\n- **MCP Client**: Such as Claude Desktop, Roo, or any MCP-compatible client\n- **Basic API Knowledge**: Understanding of REST APIs and JSON\n\n## 🎯 What You'll Learn\n\n1. How to set up the MCP server\n2. Creating your first assistant\n3. Managing conversations with threads and messages\n4. Running assistants and handling responses\n5. Best practices and common patterns\n\n---\n\n## 🔧 Setup Instructions\n\n### Option 1: NPM Package (Recommended)\n\n```bash\n# Install the package\nnpm install -g openai-assistants-mcp@latest\n\n# Run the server\nopenai-assistants-mcp --api-key YOUR_OPENAI_API_KEY\n```\n\n### Option 2: Cloudflare Workers\n\nUse our hosted version:\n```\nhttps://openai-assistants-mcp-prod.webfonts.workers.dev/mcp/YOUR_API_KEY\n```\n\n### Option 3: Local Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/your-org/openai-assistants-mcp\ncd openai-assistants-mcp\n\n# Install dependencies\nnpm install\n\n# Set your API key\nexport OPENAI_API_KEY=your_api_key_here\n\n# Run the server\nnpm start\n```\n\n---\n\n## 🎨 Your First Assistant\n\nLet's create a simple coding assistant to get you started:\n\n### Step 1: Create an Assistant\n\n```json\n{\n  \"tool\": \"assistant-create\",\n  \"arguments\": {\n    \"model\": \"gpt-4\",\n    \"name\": \"My Coding Helper\",\n    \"description\": \"A helpful coding assistant\",\n    \"instructions\": \"You are a helpful coding assistant. Provide clear, well-commented code examples and explain programming concepts in simple terms.\",\n    \"tools\": [\n      { \"type\": \"code_interpreter\" }\n    ]\n  }\n}\n```\n\n**Expected Response:**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"asst_abc123...\",\n    \"name\": \"My Coding Helper\",\n    \"model\": \"gpt-4\",\n    \"created_at\": 1706745600\n  }\n}\n```\n\n### Step 2: Create a Conversation Thread\n\n```json\n{\n  \"tool\": \"thread-create\",\n  \"arguments\": {\n    \"metadata\": {\n      \"purpose\": \"coding_help\",\n      \"user_id\": \"user_123\"\n    }\n  }\n}\n```\n\n**Expected Response:**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"id\": \"thread_def456...\",\n    \"created_at\": 1706745660,\n    \"metadata\": {\n      \"purpose\": \"coding_help\",\n      \"user_id\": \"user_123\"\n    }\n  }\n}\n```\n\n### Step 3: Add a Message\n\n```json\n{\n  \"tool\": \"message-create\",\n  \"arguments\": {\n    \"thread_id\": \"thread_def456...\",\n    \"role\": \"user\",\n    \"content\": \"Can you help me write a Python function to calculate the factorial of a number?\"\n  }\n}\n```\n\n### Step 4: Run the Assistant\n\n```json\n{\n  \"tool\": \"run-create\",\n  \"arguments\": {\n    \"thread_id\": \"thread_def456...\",\n    \"assistant_id\": \"asst_abc123...\"\n  }\n}\n```\n\n### Step 5: Get the Response\n\n```json\n{\n  \"tool\": \"message-list\",\n  \"arguments\": {\n    \"thread_id\": \"thread_def456...\",\n    \"order\": \"desc\",\n    \"limit\": 1\n  }\n}\n```\n\n---\n\n## 🔄 Common Workflows\n\n### Quick Question & Answer\n\n```json\n// 1. Create assistant (once)\n{ \"tool\": \"assistant-create\", \"arguments\": { \"model\": \"gpt-4\", \"name\": \"Helper\" } }\n\n// 2. Create thread\n{ \"tool\": \"thread-create\", \"arguments\": {} }\n\n// 3. Add message\n{ \"tool\": \"message-create\", \"arguments\": { \"thread_id\": \"...\", \"role\": \"user\", \"content\": \"Your question\" } }\n\n// 4. Run assistant\n{ \"tool\": \"run-create\", \"arguments\": { \"thread_id\": \"...\", \"assistant_id\": \"...\" } }\n\n// 5. Get response\n{ \"tool\": \"message-list\", \"arguments\": { \"thread_id\": \"...\", \"limit\": 1 } }\n```\n\n### Ongoing Conversation\n\n```json\n// Continue adding messages to the same thread\n{ \"tool\": \"message-create\", \"arguments\": { \"thread_id\": \"existing_thread\", \"role\": \"user\", \"content\": \"Follow-up question\" } }\n{ \"tool\": \"run-create\", \"arguments\": { \"thread_id\": \"existing_thread\", \"assistant_id\": \"existing_assistant\" } }\n```\n\n---\n\n## 🛠️ Available Tools\n\nOur MCP server provides **22 comprehensive tools**:\n\n### Assistant Management\n- `assistant-create` - Create new assistants\n- `assistant-list` - List your assistants\n- `assistant-get` - Get assistant details\n- `assistant-update` - Modify assistants\n- `assistant-delete` - Remove assistants\n\n### Thread Management\n- `thread-create` - Start new conversations\n- `thread-get` - Get thread details\n- `thread-update` - Modify thread metadata\n- `thread-delete` - Remove threads\n\n### Message Management\n- `message-create` - Add messages to threads\n- `message-list` - Get conversation history\n- `message-get` - Get specific messages\n- `message-update` - Modify message metadata\n- `message-delete` - Remove messages\n\n### Run Management\n- `run-create` - Execute assistants\n- `run-list` - List runs for a thread\n- `run-get` - Get run details\n- `run-update` - Modify run metadata\n- `run-cancel` - Stop running assistants\n- `run-submit-tool-outputs` - Handle tool calls\n\n### Run Step Management\n- `run-step-list` - Get detailed run steps\n- `run-step-get` - Get specific step details\n\n---\n\n## 📚 Using Templates\n\nWe provide pre-configured assistant templates:\n\n### Coding Assistant\n```json\n// Access the template\n{ \"resource\": \"assistant://templates/coding-assistant\" }\n\n// Use it to create an assistant\n{ \"tool\": \"assistant-create\", \"arguments\": { /* template content */ } }\n```\n\n### Data Analyst\n```json\n{ \"resource\": \"assistant://templates/data-analyst\" }\n```\n\n### Customer Support\n```json\n{ \"resource\": \"assistant://templates/customer-support\" }\n```\n\n---\n\n## ⚡ Quick Tips\n\n### 1. **Start Simple**\nBegin with basic assistants and gradually add complexity.\n\n### 2. **Use Metadata**\nAdd metadata to organize your assistants, threads, and messages:\n```json\n{\n  \"metadata\": {\n    \"project\": \"my-app\",\n    \"user_id\": \"user_123\",\n    \"session_type\": \"support\"\n  }\n}\n```\n\n### 3. **Handle Errors Gracefully**\nAlways check for errors in responses:\n```json\n{\n  \"success\": false,\n  \"error\": \"Assistant not found\",\n  \"details\": { /* error details */ }\n}\n```\n\n### 4. **Monitor Usage**\nKeep track of your API usage and costs.\n\n### 5. **Use Appropriate Models**\n- `gpt-4` for complex reasoning\n- `gpt-3.5-turbo` for faster, simpler tasks\n\n---\n\n## 🔍 Troubleshooting\n\n### Common Issues\n\n**\"Invalid API Key\"**\n- Verify your AI Provider API key is correct\n- Check if the key has sufficient permissions\n\n**\"Assistant not found\"**\n- Ensure you're using the correct assistant ID\n- Check if the assistant was deleted\n\n**\"Thread not found\"**\n- Verify the thread ID is correct\n- Ensure the thread wasn't deleted\n\n**\"Rate limit exceeded\"**\n- Implement exponential backoff\n- Consider upgrading your AI Provider plan\n\n### Getting Help\n\n1. **Check the documentation**: `docs://openai-assistants-api`\n2. **Review best practices**: `docs://best-practices`\n3. **See troubleshooting guide**: `docs://troubleshooting/common-issues`\n4. **Explore examples**: `examples://workflows/*`\n\n---\n\n## 🎉 Next Steps\n\nNow that you're set up:\n\n1. **Explore Templates**: Try different assistant templates\n2. **Read Best Practices**: Learn optimization techniques\n3. **Build Workflows**: Create multi-step processes\n4. **Join the Community**: Share your experiences\n\n### Recommended Reading Order\n\n1. 📖 **This Guide** - You're here!\n2. 📋 **API Reference** - `docs://openai-assistants-api`\n3. ⚡ **Best Practices** - `docs://best-practices`\n4. 🔧 **Troubleshooting** - `docs://troubleshooting/common-issues`\n5. 💡 **Examples** - `examples://workflows/*`\n\n---\n\n## 📞 Support\n\nNeed help? We're here for you:\n\n- **Documentation**: Comprehensive guides and references\n- **Examples**: Real-world usage patterns\n- **Community**: Share knowledge and get help\n\n**Happy building with AI Provider Assistants! 🚀**"
}