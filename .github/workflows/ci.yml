name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: TypeScript compilation check
        run: npm run type-check

      - name: Lint TypeScript files
        run: |
          npx eslint src/**/*.ts --format=github || echo "ESLint not configured, skipping..."
          npx eslint npm-package/src/**/*.ts --format=github || echo "ESLint not configured, skipping..."

      - name: Check code formatting
        run: |
          npx prettier --check "src/**/*.{ts,js,json}" || echo "Prettier not configured, skipping..."
          npx prettier --check "npm-package/src/**/*.{ts,js,json}" || echo "Prettier not configured, skipping..."

      - name: Validate package.json files
        run: |
          npm pkg fix
          cd npm-package && npm pkg fix

  # Job 2: TypeScript Compilation
  typescript-build:
    name: TypeScript Build
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Build TypeScript (Root)
        run: npm run type-check

      - name: Build TypeScript (NPM Package)
        run: |
          cd npm-package
          npx tsc --noEmit

      - name: Validate Cloudflare Workers build
        run: npm run build

  # Job 3: Unit and Integration Tests
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: typescript-build
    strategy:
      matrix:
        test-type: [core, integration, error-handling, edge-cases]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Run test suite - ${{ matrix.test-type }}
        run: |
          case "${{ matrix.test-type }}" in
            "core")
              npm run test:core
              ;;
            "integration")
              npm run test:integration
              ;;
            "error-handling")
              npm run test:error-handling
              ;;
            "edge-cases")
              npm run test:edge-cases
              ;;
          esac
        env:
          # Use test mode without real API key for CI
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            test-results/
            coverage/
          retention-days: 7

  # Job 4: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: typescript-build
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'performance')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Run performance tests
        run: npm run test:performance
        env:
          CI: true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: performance-results/
          retention-days: 30

  # Job 5: Deployment Tests
  deployment-tests:
    name: Deployment Tests
    runs-on: ubuntu-latest
    needs: test-suite
    strategy:
      matrix:
        deployment: [cloudflare, npm-package]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Test ${{ matrix.deployment }} deployment
        run: |
          case "${{ matrix.deployment }}" in
            "cloudflare")
              npm run test:cloudflare
              ;;
            "npm-package")
              npm run test:npm
              ;;
          esac
        env:
          CI: true

  # Job 6: Security and Dependency Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Run npm audit (Root)
        run: npm audit --audit-level=moderate

      - name: Run npm audit (NPM Package)
        run: |
          cd npm-package
          npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install and run security scanner
        run: |
          npm install -g audit-ci
          audit-ci --moderate

  # Job 7: Test Coverage Analysis
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: test-suite
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Install coverage tools
        run: npm install -g c8

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # Job 8: Final Status Check
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [code-quality, typescript-build, test-suite, deployment-tests, security-audit, coverage]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "TypeScript Build: ${{ needs.typescript-build.result }}"
          echo "Test Suite: ${{ needs.test-suite.result }}"
          echo "Deployment Tests: ${{ needs.deployment-tests.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.typescript-build.result }}" == "success" && 
                "${{ needs.test-suite.result }}" == "success" && 
                "${{ needs.deployment-tests.result }}" == "success" && 
                "${{ needs.security-audit.result }}" == "success" && 
                "${{ needs.coverage.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed!"
            exit 1
          fi

      - name: Post status to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('CI Status Report')
            );
            
            const status = '${{ needs.code-quality.result }}' === 'success' && 
                          '${{ needs.typescript-build.result }}' === 'success' && 
                          '${{ needs.test-suite.result }}' === 'success' && 
                          '${{ needs.deployment-tests.result }}' === 'success' && 
                          '${{ needs.security-audit.result }}' === 'success' && 
                          '${{ needs.coverage.result }}' === 'success' ? '✅ PASSED' : '❌ FAILED';
            
            const body = `## CI Status Report
            
            **Overall Status: ${status}**
            
            | Check | Status |
            |-------|--------|
            | Code Quality | ${{ needs.code-quality.result }} |
            | TypeScript Build | ${{ needs.typescript-build.result }} |
            | Test Suite | ${{ needs.test-suite.result }} |
            | Deployment Tests | ${{ needs.deployment-tests.result }} |
            | Security Audit | ${{ needs.security-audit.result }} |
            | Coverage | ${{ needs.coverage.result }} |
            
            _Updated: ${new Date().toISOString()}_`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }