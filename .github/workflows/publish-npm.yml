name: Publish NPM Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: 'Prerelease tag (alpha, beta, rc)'
        required: false
        default: 'alpha'
        type: string
      dry_run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Job 1: Version and validation
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-publish: ${{ steps.check.outputs.should-publish }}
      is-prerelease: ${{ steps.check.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Run comprehensive tests
        run: npm run test:ci
        env:
          CI: true

      - name: Validate package structure
        run: |
          cd npm-package
          npm pack --dry-run
          npm run test

      - name: Determine version and release type
        id: version
        run: |
          cd npm-package
          
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # Extract version from release tag
            VERSION="${{ github.event.release.tag_name }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix if present
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Calculate new version based on input
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            
            case "${{ github.event.inputs.version_type }}" in
              "prerelease")
                NEW_VERSION=$(npm version prerelease --preid=${{ github.event.inputs.prerelease_tag }} --no-git-tag-version)
                ;;
              *)
                NEW_VERSION=$(npm version ${{ github.event.inputs.version_type }} --no-git-tag-version)
                ;;
            esac
            
            NEW_VERSION=${NEW_VERSION#v}  # Remove 'v' prefix
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            
            # Update root package.json version to match
            cd ..
            npm version $NEW_VERSION --no-git-tag-version
          fi

      - name: Check if should publish
        id: check
        run: |
          cd npm-package
          VERSION="${{ steps.version.outputs.version }}"
          
          # Check if version already exists on npm
          if npm view openai-assistants-mcp@$VERSION version 2>/dev/null; then
            echo "Version $VERSION already exists on npm"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi
          
          # Check if this is a prerelease
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Update package versions
        if: steps.check.outputs.should-publish == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Update npm-package version
          cd npm-package
          npm version $VERSION --no-git-tag-version
          
          # Update root package version
          cd ..
          npm version $VERSION --no-git-tag-version

      - name: Commit version changes
        if: steps.check.outputs.should-publish == 'true' && github.event.inputs.dry_run != 'true' && github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json npm-package/package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          git push

  # Job 2: Build and test package
  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.should-publish == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Update package version
        run: |
          cd npm-package
          npm version ${{ needs.prepare-release.outputs.version }} --no-git-tag-version

      - name: Build package
        run: |
          cd npm-package
          # Ensure all files are properly included
          npm pack --dry-run

      - name: Test package installation
        run: |
          cd npm-package
          npm pack
          PACKAGE_FILE=$(ls *.tgz)
          
          # Test installation in a temporary directory
          mkdir -p /tmp/test-install
          cd /tmp/test-install
          npm init -y
          npm install $GITHUB_WORKSPACE/npm-package/$PACKAGE_FILE
          
          # Test that the package can be required/imported
          node -e "
            const pkg = require('openai-assistants-mcp');
            console.log('Package loaded successfully');
          "

      - name: Run package-specific tests
        run: |
          cd npm-package
          npm test

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-${{ needs.prepare-release.outputs.version }}
          path: npm-package/*.tgz
          retention-days: 30

  # Job 3: Security and quality checks
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.should-publish == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Run security audit
        run: |
          cd npm-package
          npm audit --audit-level=moderate

      - name: Check for sensitive files
        run: |
          cd npm-package
          
          # Check that sensitive files are not included
          if npm pack --dry-run | grep -E "\.(env|key|pem|p12|pfx)$"; then
            echo "❌ Sensitive files detected in package"
            exit 1
          fi
          
          # Check for API keys or secrets in code
          if grep -r -E "(api[_-]?key|secret|password|token)" --include="*.js" --include="*.cjs" .; then
            echo "❌ Potential secrets detected in code"
            exit 1
          fi

      - name: Validate package metadata
        run: |
          cd npm-package
          
          # Check required fields
          node -e "
            const pkg = require('./package.json');
            const required = ['name', 'version', 'description', 'main', 'author', 'license'];
            const missing = required.filter(field => !pkg[field]);
            if (missing.length > 0) {
              console.error('Missing required fields:', missing);
              process.exit(1);
            }
            console.log('✅ Package metadata is valid');
          "

  # Job 4: Publish to NPM
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [prepare-release, build-package, security-check]
    if: needs.prepare-release.outputs.should-publish == 'true' && github.event.inputs.dry_run != 'true'
    environment:
      name: npm-production
      url: https://www.npmjs.com/package/openai-assistants-mcp
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Update package version
        run: |
          cd npm-package
          npm version ${{ needs.prepare-release.outputs.version }} --no-git-tag-version

      - name: Publish to NPM
        run: |
          cd npm-package
          
          if [[ "${{ needs.prepare-release.outputs.is-prerelease }}" == "true" ]]; then
            echo "Publishing prerelease version..."
            npm publish --tag beta
          else
            echo "Publishing stable version..."
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify publication
        run: |
          sleep 30  # Wait for npm registry to update
          
          VERSION="${{ needs.prepare-release.outputs.version }}"
          PUBLISHED_VERSION=$(npm view openai-assistants-mcp@$VERSION version)
          
          if [[ "$PUBLISHED_VERSION" == "$VERSION" ]]; then
            echo "✅ Package successfully published: openai-assistants-mcp@$VERSION"
          else
            echo "❌ Publication verification failed"
            exit 1
          fi

  # Job 5: Create GitHub release (if not already created)
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, publish]
    if: needs.prepare-release.outputs.should-publish == 'true' && github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [[ -n "$LAST_TAG" ]]; then
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## NPM Package" >> $GITHUB_OUTPUT
          echo "Install with: \`npm install openai-assistants-mcp@$VERSION\`" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          release_name: Release v${{ needs.prepare-release.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}

  # Job 6: Post-publication validation
  validate-publication:
    name: Validate Publication
    runs-on: ubuntu-latest
    needs: [prepare-release, publish]
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Test package installation from NPM
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          # Create a temporary project to test installation
          mkdir -p /tmp/test-npm-install
          cd /tmp/test-npm-install
          npm init -y
          
          # Install the published package
          npm install openai-assistants-mcp@$VERSION
          
          # Test that it can be loaded
          node -e "
            const pkg = require('openai-assistants-mcp');
            console.log('✅ Package installed and loaded successfully from NPM');
          "

      - name: Test CLI functionality
        run: |
          cd /tmp/test-npm-install
          
          # Test the CLI command
          npx openai-assistants-mcp --help || echo "CLI help command executed"

  # Job 7: Notification and cleanup
  notify:
    name: Publication Notification
    runs-on: ubuntu-latest
    needs: [prepare-release, publish, validate-publication]
    if: always()
    steps:
      - name: Determine publication status
        id: status
        run: |
          if [[ "${{ needs.publish.result }}" == "success" && "${{ needs.validate-publication.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ NPM package published successfully" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "status=dry-run" >> $GITHUB_OUTPUT
            echo "message=🧪 Dry run completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=❌ NPM package publication failed" >> $GITHUB_OUTPUT
          fi

      - name: Create publication summary
        run: |
          echo "## NPM Package Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.prepare-release.outputs.should-publish }}" == "true" ]]; then
            echo "**Package:** openai-assistants-mcp" >> $GITHUB_STEP_SUMMARY
            echo "**Version:** ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Registry:** https://www.npmjs.com/package/openai-assistants-mcp" >> $GITHUB_STEP_SUMMARY
            echo "**Install:** \`npm install openai-assistants-mcp@${{ needs.prepare-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Published at:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

      - name: Post to Slack (if configured)
        if: env.SLACK_WEBHOOK_URL != '' && steps.status.outputs.status == 'success'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"📦 NPM Package Published: openai-assistants-mcp@${{ needs.prepare-release.outputs.version }}\nhttps://www.npmjs.com/package/openai-assistants-mcp"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}