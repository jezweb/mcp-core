name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - secrets

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Run npm audit (Root)
        id: audit-root
        run: |
          echo "=== Root Package Audit ===" > dependency-scan-report.txt
          npm audit --audit-level=low --json > root-audit.json || true
          npm audit --audit-level=low >> dependency-scan-report.txt || true

      - name: Run npm audit (NPM Package)
        id: audit-npm
        run: |
          echo "" >> dependency-scan-report.txt
          echo "=== NPM Package Audit ===" >> dependency-scan-report.txt
          cd npm-package
          npm audit --audit-level=low --json > ../npm-audit.json || true
          npm audit --audit-level=low >> ../dependency-scan-report.txt || true

      - name: Install security scanning tools
        run: |
          npm install -g audit-ci retire snyk

      - name: Run Retire.js scan
        run: |
          echo "" >> dependency-scan-report.txt
          echo "=== Retire.js Vulnerability Scan ===" >> dependency-scan-report.txt
          retire --outputformat text >> dependency-scan-report.txt || echo "Retire.js scan completed with findings"

      - name: Run Snyk scan (if token available)
        if: env.SNYK_TOKEN != ''
        run: |
          echo "" >> dependency-scan-report.txt
          echo "=== Snyk Vulnerability Scan ===" >> dependency-scan-report.txt
          snyk test --json > snyk-report.json || true
          snyk test >> dependency-scan-report.txt || echo "Snyk scan completed with findings"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Analyze vulnerability severity
        id: analyze
        run: |
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          MEDIUM_COUNT=0
          LOW_COUNT=0
          
          # Count vulnerabilities from npm audit
          if [ -f root-audit.json ]; then
            CRITICAL_COUNT=$((CRITICAL_COUNT + $(jq '.metadata.vulnerabilities.critical // 0' root-audit.json)))
            HIGH_COUNT=$((HIGH_COUNT + $(jq '.metadata.vulnerabilities.high // 0' root-audit.json)))
            MEDIUM_COUNT=$((MEDIUM_COUNT + $(jq '.metadata.vulnerabilities.moderate // 0' root-audit.json)))
            LOW_COUNT=$((LOW_COUNT + $(jq '.metadata.vulnerabilities.low // 0' root-audit.json)))
          fi
          
          if [ -f npm-audit.json ]; then
            CRITICAL_COUNT=$((CRITICAL_COUNT + $(jq '.metadata.vulnerabilities.critical // 0' npm-audit.json)))
            HIGH_COUNT=$((HIGH_COUNT + $(jq '.metadata.vulnerabilities.high // 0' npm-audit.json)))
            MEDIUM_COUNT=$((MEDIUM_COUNT + $(jq '.metadata.vulnerabilities.moderate // 0' npm-audit.json)))
            LOW_COUNT=$((LOW_COUNT + $(jq '.metadata.vulnerabilities.low // 0' npm-audit.json)))
          fi
          
          echo "critical=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "medium=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
          echo "low=$LOW_COUNT" >> $GITHUB_OUTPUT
          
          # Determine if scan should fail
          if [ $CRITICAL_COUNT -gt 0 ] || [ $HIGH_COUNT -gt 5 ]; then
            echo "should-fail=true" >> $GITHUB_OUTPUT
          else
            echo "should-fail=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            dependency-scan-report.txt
            root-audit.json
            npm-audit.json
            snyk-report.json
          retention-days: 30

      - name: Fail on critical vulnerabilities
        if: steps.analyze.outputs.should-fail == 'true'
        run: |
          echo "❌ Critical security vulnerabilities detected!"
          echo "Critical: ${{ steps.analyze.outputs.critical }}"
          echo "High: ${{ steps.analyze.outputs.high }}"
          exit 1

  # Job 2: Code security scanning
  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd npm-package && npm ci

      - name: Install ESLint security plugin
        run: npm install -g eslint eslint-plugin-security

      - name: Run ESLint security scan
        run: |
          echo "=== ESLint Security Scan ===" > code-scan-report.txt
          
          # Create temporary eslint config for security scanning
          cat > .eslintrc.security.json << 'EOF'
          {
            "plugins": ["security"],
            "extends": ["plugin:security/recommended"],
            "rules": {
              "security/detect-object-injection": "error",
              "security/detect-non-literal-regexp": "error",
              "security/detect-unsafe-regex": "error",
              "security/detect-buffer-noassert": "error",
              "security/detect-child-process": "error",
              "security/detect-disable-mustache-escape": "error",
              "security/detect-eval-with-expression": "error",
              "security/detect-no-csrf-before-method-override": "error",
              "security/detect-non-literal-fs-filename": "error",
              "security/detect-non-literal-require": "error",
              "security/detect-possible-timing-attacks": "error",
              "security/detect-pseudoRandomBytes": "error"
            }
          }
          EOF
          
          eslint --config .eslintrc.security.json "src/**/*.ts" "npm-package/src/**/*.ts" --format unix >> code-scan-report.txt || echo "ESLint security scan completed with findings"

      - name: Scan for hardcoded secrets
        run: |
          echo "" >> code-scan-report.txt
          echo "=== Hardcoded Secrets Scan ===" >> code-scan-report.txt
          
          # Search for potential secrets in code
          grep -r -n -E "(api[_-]?key|secret|password|token|private[_-]?key)" --include="*.ts" --include="*.js" --include="*.json" . >> code-scan-report.txt || echo "No hardcoded secrets detected"

      - name: Scan for dangerous patterns
        run: |
          echo "" >> code-scan-report.txt
          echo "=== Dangerous Code Patterns ===" >> code-scan-report.txt
          
          # Search for dangerous patterns
          echo "Checking for eval() usage:" >> code-scan-report.txt
          grep -r -n "eval(" --include="*.ts" --include="*.js" . >> code-scan-report.txt || echo "No eval() usage found"
          
          echo "Checking for innerHTML usage:" >> code-scan-report.txt
          grep -r -n "innerHTML" --include="*.ts" --include="*.js" . >> code-scan-report.txt || echo "No innerHTML usage found"
          
          echo "Checking for document.write usage:" >> code-scan-report.txt
          grep -r -n "document.write" --include="*.ts" --include="*.js" . >> code-scan-report.txt || echo "No document.write usage found"

      - name: Run Semgrep security scan (if available)
        run: |
          if command -v semgrep &> /dev/null; then
            echo "" >> code-scan-report.txt
            echo "=== Semgrep Security Scan ===" >> code-scan-report.txt
            semgrep --config=auto --json --output=semgrep-results.json . || true
            semgrep --config=auto . >> code-scan-report.txt || echo "Semgrep scan completed"
          else
            echo "Semgrep not available, skipping..."
          fi

      - name: Upload code scan results
        uses: actions/upload-artifact@v4
        with:
          name: code-scan-results
          path: |
            code-scan-report.txt
            semgrep-results.json
          retention-days: 30

  # Job 3: Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: Run TruffleHog secret scan
        run: |
          echo "=== TruffleHog Secret Scan ===" > secret-scan-report.txt
          trufflehog git file://. --json > trufflehog-results.json || true
          trufflehog git file://. >> secret-scan-report.txt || echo "TruffleHog scan completed"

      - name: Install and run GitLeaks
        run: |
          # Install GitLeaks
          wget -O gitleaks.tar.gz https://github.com/zricethezav/gitleaks/releases/latest/download/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          chmod +x gitleaks
          
          echo "" >> secret-scan-report.txt
          echo "=== GitLeaks Secret Scan ===" >> secret-scan-report.txt
          ./gitleaks detect --source . --report-format json --report-path gitleaks-results.json || true
          ./gitleaks detect --source . >> secret-scan-report.txt || echo "GitLeaks scan completed"

      - name: Analyze secret scan results
        id: analyze-secrets
        run: |
          SECRET_COUNT=0
          
          # Count secrets from TruffleHog
          if [ -f trufflehog-results.json ]; then
            SECRET_COUNT=$((SECRET_COUNT + $(jq '. | length' trufflehog-results.json 2>/dev/null || echo 0)))
          fi
          
          # Count secrets from GitLeaks
          if [ -f gitleaks-results.json ]; then
            SECRET_COUNT=$((SECRET_COUNT + $(jq '. | length' gitleaks-results.json 2>/dev/null || echo 0)))
          fi
          
          echo "secret-count=$SECRET_COUNT" >> $GITHUB_OUTPUT
          
          if [ $SECRET_COUNT -gt 0 ]; then
            echo "has-secrets=true" >> $GITHUB_OUTPUT
          else
            echo "has-secrets=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: |
            secret-scan-report.txt
            trufflehog-results.json
            gitleaks-results.json
          retention-days: 30

      - name: Fail on detected secrets
        if: steps.analyze-secrets.outputs.has-secrets == 'true'
        run: |
          echo "❌ Secrets detected in repository!"
          echo "Secret count: ${{ steps.analyze-secrets.outputs.secret-count }}"
          echo "Please review the secret scan results and remove any exposed secrets."
          exit 1

  # Job 4: Container security scan (if Dockerfile exists)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Dockerfile
        id: check-dockerfile
        run: |
          if [ -f Dockerfile ]; then
            echo "has-dockerfile=true" >> $GITHUB_OUTPUT
          else
            echo "has-dockerfile=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Trivy container scan
        if: steps.check-dockerfile.outputs.has-dockerfile == 'true'
        run: |
          # Install Trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan Dockerfile
          trivy config . > container-scan-report.txt

      - name: Upload container scan results
        if: steps.check-dockerfile.outputs.has-dockerfile == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results
          path: container-scan-report.txt
          retention-days: 30

  # Job 5: Security report generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, container-scan]
    if: always()
    steps:
      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: scan-results

      - name: Generate comprehensive security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> security-report.md
          echo "Workflow: ${{ github.workflow }}" >> security-report.md
          echo "Run: ${{ github.run_number }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Summary" >> security-report.md
          echo "| Scan Type | Status | Issues |" >> security-report.md
          echo "|-----------|--------|--------|" >> security-report.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | ${{ needs.dependency-scan.outputs.critical || '0' }} Critical, ${{ needs.dependency-scan.outputs.high || '0' }} High |" >> security-report.md
          echo "| Code Scan | ${{ needs.code-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> security-report.md
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | ${{ needs.secret-scan.outputs.secret-count || '0' }} Secrets |" >> security-report.md
          echo "| Container Scan | ${{ needs.container-scan.result == 'success' && '✅ Passed' || needs.container-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | - |" >> security-report.md
          echo "" >> security-report.md
          
          # Add detailed findings if available
          if [ -d "scan-results" ]; then
            echo "## Detailed Findings" >> security-report.md
            
            for result_dir in scan-results/*/; do
              if [ -d "$result_dir" ]; then
                echo "### $(basename "$result_dir")" >> security-report.md
                echo "\`\`\`" >> security-report.md
                find "$result_dir" -name "*.txt" -exec cat {} \; >> security-report.md
                echo "\`\`\`" >> security-report.md
                echo "" >> security-report.md
              fi
            done
          fi

      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: security-report.md
          retention-days: 90

      - name: Create security issue for failures
        if: needs.dependency-scan.result == 'failure' || needs.secret-scan.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let report = '';
            
            try {
              report = fs.readFileSync('security-report.md', 'utf8');
            } catch (error) {
              report = 'Security report generation failed.';
            }
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Scan Failures Detected',
              body: `## Security Alert
              
              Security scans have detected critical issues that require immediate attention.
              
              **Detected:** ${new Date().toISOString()}
              **Workflow:** ${context.workflow}
              **Run:** ${context.runNumber}
              
              ${report}
              
              ### Immediate Actions Required
              1. Review all security findings
              2. Address critical and high-severity vulnerabilities
              3. Remove any exposed secrets
              4. Update dependencies with security patches
              5. Re-run security scans to verify fixes
              
              **Priority:** Critical - Please address these security issues immediately.`,
              labels: ['security', 'critical', 'urgent']
            });

      - name: Post security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Critical Issues |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-scan.result == 'success' && '✅' || '❌' }} | ${{ needs.dependency-scan.outputs.critical || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code | ${{ needs.code-scan.result == 'success' && '✅' || '❌' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets | ${{ needs.secret-scan.result == 'success' && '✅' || '❌' }} | ${{ needs.secret-scan.outputs.secret-count || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container | ${{ needs.container-scan.result == 'success' && '✅' || needs.container-scan.result == 'skipped' && '⏭️' || '❌' }} | - |" >> $GITHUB_STEP_SUMMARY