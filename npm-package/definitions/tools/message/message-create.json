{
  "$schema": "../../schemas/tool-schema.json",
  "name": "message-create",
  "title": "Create Message",
  "description": "Add a new message to a conversation thread. Use this to send user messages, add context, or continue conversations. Messages can include text content and will be processed by assistants when runs are created. Essential for building interactive conversations and providing input to assistants.",
  "category": "message",
  "inputSchema": {
    "type": "object",
    "properties": {
      "thread_id": {
        "type": "string",
        "description": "The unique identifier of the thread to add the message to (format: \"thread_abc123...\")."
      },
      "role": {
        "type": "string",
        "enum": ["user", "assistant"],
        "description": "The role of the message sender. Use \"user\" for human messages, \"assistant\" for AI responses."
      },
      "content": {
        "type": "string",
        "description": "The text content of the message. This is what the assistant will see and respond to."
      },
      "metadata": {
        "type": "object",
        "description": "Optional metadata for the message (e.g., {\"source\": \"web\", \"timestamp\": \"2025-01-31T02:37:00.000Z\", \"user_id\": \"12345\"})."
      }
    },
    "required": ["thread_id", "role", "content"]
  },
  "examples": [
    {
      "title": "Add user question",
      "description": "Send a user question to start or continue a conversation",
      "input": {
        "thread_id": "thread_abc123def456ghi789jkl012",
        "role": "user",
        "content": "Can you help me debug this Python function? It's not returning the expected results.",
        "metadata": {
          "source": "web_interface",
          "user_id": "user_12345"
        }
      }
    },
    {
      "title": "Add context message",
      "description": "Provide additional context or information to the conversation",
      "input": {
        "thread_id": "thread_abc123def456ghi789jkl012",
        "role": "user",
        "content": "Here's the code I'm having trouble with: def calculate_average(numbers): return sum(numbers) / len(numbers)"
      }
    }
  ],
  "metadata": {
    "version": "1.0.0",
    "author": "OpenAI Assistants MCP Team",
    "lastModified": "2025-01-31T02:37:00.000Z",
    "tags": ["message", "create", "conversation", "thread"]
  }
}