{
  "$schema": "../../schemas/resource-schema.json",
  "uri": "docs://troubleshooting/common-issues",
  "name": "Troubleshooting Guide",
  "description": "Common issues and solutions when working with OpenAI Assistants API",
  "mimeType": "text/markdown",
  "category": "documentation",
  "tags": ["troubleshooting", "errors", "debugging", "solutions"],
  "contentType": "markdown",
  "content": "# OpenAI Assistants API Troubleshooting Guide\n\n## Common Issues and Solutions\n\n### 1. Rate Limiting Errors\n**Error**: `429 Too Many Requests`\n**Solution**: Implement exponential backoff and respect rate limits.\n\n```javascript\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nasync function retryWithBackoff(fn, maxRetries = 3) {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (error.status === 429 && i < maxRetries - 1) {\n        await delay(Math.pow(2, i) * 1000);\n        continue;\n      }\n      throw error;\n    }\n  }\n}\n```\n\n### 2. Tool Call Timeouts\n**Issue**: Assistant runs get stuck waiting for tool outputs\n**Solution**: Always submit tool outputs or cancel the run\n\n```javascript\n// Monitor run status and handle timeouts\nconst checkRunStatus = async (threadId, runId) => {\n  const run = await openai.beta.threads.runs.retrieve(threadId, runId);\n  \n  if (run.status === 'requires_action') {\n    // Handle tool calls or cancel if taking too long\n    const toolCalls = run.required_action.submit_tool_outputs.tool_calls;\n    // Process tool calls...\n  }\n  \n  return run;\n};\n```\n\n### 3. Message Formatting Issues\n**Issue**: Messages not displaying correctly\n**Solution**: Ensure proper content formatting\n\n```javascript\n// Correct message format\nconst message = {\n  role: 'user',\n  content: 'Your message here',\n  metadata: {\n    source: 'user-input',\n    timestamp: new Date().toISOString()\n  }\n};\n```\n\n### 4. File Upload Problems\n**Issue**: Files not being processed correctly\n**Solution**: Verify file format and size limits\n\n- Supported formats: .txt, .pdf, .docx, .md\n- Maximum file size: 512MB\n- Ensure proper MIME type\n\n### 5. Assistant Configuration Errors\n**Issue**: Assistant not behaving as expected\n**Solution**: Review instructions and tool configuration\n\n```javascript\n// Clear, specific instructions\nconst assistant = {\n  model: 'gpt-4',\n  name: 'Code Helper',\n  instructions: 'You are a helpful coding assistant. Always provide clear, commented code examples.',\n  tools: [{ type: 'code_interpreter' }]\n};\n```\n\n## Debugging Tips\n\n1. **Check API Response Status**: Always verify HTTP status codes\n2. **Log Request/Response**: Enable detailed logging for debugging\n3. **Validate Input**: Ensure all required parameters are provided\n4. **Monitor Usage**: Track API usage to avoid limits\n5. **Test Incrementally**: Start with simple operations before complex workflows",
  "metadata": {
    "version": "1.0.0",
    "author": "OpenAI Assistants MCP Team",
    "lastModified": "2025-01-31T02:47:00.000Z",
    "usage": "troubleshooting",
    "size": 2048
  }
}